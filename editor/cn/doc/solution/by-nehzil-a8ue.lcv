**思路分析**
一般动态规划求解的都是数的问题不用保存每一种情况，而且本题在最后仔细的读其实给我们定义dp数组一点提示，【不同开始位置或者结束位置代表不同的子串】提示dp是一个二维数组i和j分别代表不同的开始和结束位置是否是回文串。所以就有dp[i][j]代表的就是[i,j]范围内是否是回文子串。
**动态规划**
1. **确定dp数组以及下标的含义**

- dp[i][j]：表示区间范围[i,j]的子串是否是回文子串，如果是dp[i][j]为true，否则为false。

2. **状态转移方程**
   回文串的定义是正反读都是一样说明，回文串的首尾字符肯定一样所以秉持这个定义进行分类讨论：

- 当s[i]与s[j]不相等，肯定不是回文子串即 dp[i][j] = false。
- 当s[i]与s[j]相等时，需要判断 i 和 j 的情况
  1. 下标 i 与 j 相同，说明在区间内只有一个字符所以是回文子串即 dp[i][j] = true
  2. 下标 i 与 j 相差为1，说明在区间内有两个相等的字符所以是回文子串即 dp[i][j] = true
  3. 下标：i 与 j相差大于1的时候，说明区间内字符数已经大于等于三个所以要判断此区间内是不是字符串需要将区间缩小即 要判断[i+1,j-1]区间是否是回文串。
     以上三种情况分析完了，那么递归公式如下：

* 

```
if (s[i] == s[j]) {
    if (j - i <= 1) { // 情况一 和 情况二
        result++;
        dp[i][j] = true;
    } else if (dp[i + 1][j - 1]) { // 情况三
        result++;
        dp[i][j] = true;
    }
}
```

result就是统计回文子串的数量。
注意这里我没有列出当s[i]与s[j]不相等的时候，因为在下面dp[i][j]初始化的时候，就初始为false。

3. **dp数组初始化**

- dp[i][j]初始化为false。

4. **确定遍历顺序**

- 由情况3可知dp[i][j]的状态是由dp[i + 1][j - 1]所以i是有i+1推得，j由j-1推得所以综上分析i应该从大到小倒序，j应该从i开始正序遍历 ，保证了dp[i + 1][j - 1]都是经过计算的。

* 

```
class Solution {
public:
    int countSubstrings(string s) {
        /* 定义存储结果的变量 */
        int result = 0;
        /* 定义dp数组 dp[i][j] 表示 【i，j】区间中的字符串是不是回文子串 */
        vector<vector<bool>> dp(s.size() + 1,vector<bool>(s.size() +1,false));

        for (int i = s.size() - 1; i >= 0; i--) {  // 注意遍历顺序
            for (int j = i; j < s.size(); j++) {
                if (s[i] == s[j]) {
                    if (j - i <= 1) { // 情况一 和 情况二
                        result++;
                        dp[i][j] = true;
                    } else if (dp[i + 1][j - 1]) { // 情况三
                        result++;
                        dp[i][j] = true;
                    }
                }
            }
        }
        return result;
    }
};
```

